<?php
/**
 * Implements hook_menu().
 *
 * Provides the following pages:
 *   - Admin page to select the node
 *   - JSON page that generates the autocomplete list
 */
function singlenodequeue_menu() {
  $items['admin/config/system/single_node_queue'] = array(
    'title' => 'Featured Press Coverage',
    'description' => 'Select the Press Coverage node that should appear in the Featured section.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('singlenodequeue_admin'),
    'access arguments' => array('administer single node queue'),
    'type' => MENU_NORMAL_ITEM,
   );

  $items['admin/autocomplete/singlenodequeue/%'] = array(
    'title' => 'Single Node Queue Autocomplete',
    'page callback' => 'singlenodequeue_autocomplete',
    'page arguments' => array(3),
    'access arguments' => array('administer single node queue'),
    'type' => MENU_NORMAL_ITEM,
  );

 return $items;
}

/**
 * Implements hook_permission().
 */
function singlenodequeue_permission() {
  return array(
    'administer single node queue' => array(
      'title' => t('Administer Single Node Queue'),
      'description' => t('Select the node that is featured by the SNQ.'),
    ),
  );
}


/**
 * Generates the form for the admin page.
 */
function singlenodequeue_admin() {
  $form['description']['#markup'] = '<p>Enter the Press Coverage node that
    should appear in the Featured section in the News & Press section.</p>';

  $form['singlenodequeue_node'] = array(
    '#type' => 'textfield',
    '#title' => t('Featured Press Coverage'),
    '#autocomplete_path' => 'admin/autocomplete/singlenodequeue',
    '#default_value' => variable_get('singlenodequeue_node', 1),
  );

  return system_settings_form($form);
}

/**
 * Generates the JSON feed for the autocomplete form item.
 */
function singlenodequeue_autocomplete($search_string) {
  //@todo type obviously needs to be a variable.
  $results = db_query("SELECT title, nid FROM {node} WHERE type = :type AND title LIKE :search_string",
    array(':type' => 'press_coverage', ':search_string' => '%' . db_like($search_string) . '%'))
    ->fetchAll();

  foreach ($results as $result) {
    $item = $result->title . '[' . $result->nid . ']';
    $list[$item] = $item;
  }

  print drupal_json_encode($list);
}

/**
 * Extracts the nid from the title[nid] format we save the value in.
 */
function singlenodequeue_extract_nid($string) {
  $result = preg_match('/\[([0-9]+)\]$/', $string, $matches);
  if ($result > 0) {
    // If $result is nonzero, we found a match and can use it as the index into
    // $matches.
    return $matches[$result];
  }
  else {
    // @todo drupal_set_message()? Better fallback?
    return FALSE;
  }
}

